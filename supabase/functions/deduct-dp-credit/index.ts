import { createClient } from "npm:@supabase/supabase-js@2.39.7";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

Deno.serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const { userId, eventId } = await req.json();

    if (!userId || !eventId) {
      return new Response(
        JSON.stringify({ error: "User ID and Event ID are required" }),
        {
          status: 400,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    }

    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
    );

    // Fetch user's current credit info
    const { data: userData, error: userError } = await supabaseClient
      .from("users")
      .select("credits, is_premium_user")
      .eq("id", userId)
      .single();

    if (userError || !userData) {
      console.error("Error fetching user data:", userError);
      throw new Error("User not found or could not fetch data.");
    }

    let { credits, is_premium_user } = userData;

    // Count DPs generated by this user for this specific event
    const { count: dpsCount, error: dpsCountError } = await supabaseClient
      .from("dps")
      .select("*", { count: "exact", head: true })
      .eq("user_id", userId)
      .eq("event_id", eventId);

    if (dpsCountError) {
      console.error("Error counting DPs:", dpsCountError);
      throw new Error("Failed to count DPs for event.");
    }

    const freeDPLimitPerEvent = 100;
    const dpCostPerThousand = 1; // 1 credit per 1000 DPs
    const dpCostPerUnit = dpCostPerThousand / 1000; // 0.001 credits per DP

    if (dpsCount !== null && dpsCount < freeDPLimitPerEvent) {
      // Still within free DP limit for this event, no credit deduction
      return new Response(
        JSON.stringify({
          message: "Within free DP limit for this event.",
          remaining_free_dps: freeDPLimitPerEvent - dpsCount,
          credits_deducted: 0,
        }),
        {
          status: 200,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    } else {
      // Free DP limit exhausted for this event, deduct credits
      if (credits < dpCostPerUnit) {
        return new Response(
          JSON.stringify({ 
            error: "Insufficient credits",
            required_credits: dpCostPerUnit,
            available_credits: credits
          }),
          {
            status: 402, // Payment Required
            headers: { "Content-Type": "application/json", ...corsHeaders },
          }
        );
      }

      const newCredits = credits - dpCostPerUnit;

      const { error: updateError } = await supabaseClient
        .from("users")
        .update({ credits: newCredits })
        .eq("id", userId);

      if (updateError) {
        console.error("Error updating credits:", updateError);
        throw new Error("Failed to deduct credits for DP generation.");
      }

      return new Response(
        JSON.stringify({
          message: "Credits deducted for DP generation successfully.",
          remaining_credits: newCredits,
          credits_deducted: dpCostPerUnit,
        }),
        {
          status: 200,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    }
  } catch (error) {
    console.error("Edge Function error:", error.message);
    return new Response(
      JSON.stringify({ error: error.message || "Internal Server Error" }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
});