import { createClient } from "npm:@supabase/supabase-js@2.39.7";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization, x-client-info, apikey",
};

Deno.serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const { userId, eventId, requestId } = await req.json();

    if (!userId || !eventId) {
      return new Response(
        JSON.stringify({ error: "User ID and Event ID are required" }),
        {
          status: 400,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    }

    if (!requestId) {
      return new Response(
        JSON.stringify({ error: "Request ID is required for idempotency" }),
        {
          status: 400,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    }

    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
    );

    // Check if this request has already been processed
    const { data: existingRequest, error: checkError } = await supabaseClient
      .from("credit_deduction_requests")
      .select("status, amount")
      .eq("request_id", requestId)
      .maybeSingle();

    if (checkError) {
      console.error("Error checking for existing request:", checkError);
      throw new Error("Failed to check for duplicate request.");
    }

    // If request already exists, return the previous result
    if (existingRequest) {
      if (existingRequest.status === "completed") {
        return new Response(
          JSON.stringify({
            message: "Request already processed successfully.",
            credits_deducted: existingRequest.amount,
            idempotent: true,
          }),
          {
            status: 200,
            headers: { "Content-Type": "application/json", ...corsHeaders },
          }
        );
      } else {
        return new Response(
          JSON.stringify({
            error: "Previous request failed",
            idempotent: true,
          }),
          {
            status: 400,
            headers: { "Content-Type": "application/json", ...corsHeaders },
          }
        );
      }
    }

    // Fetch user's current credit info
    const { data: userData, error: userError } = await supabaseClient
      .from("users")
      .select("credits, is_premium_user")
      .eq("id", userId)
      .single();

    if (userError || !userData) {
      console.error("Error fetching user data:", userError);

      // Record the failed request
      await supabaseClient.from("credit_deduction_requests").insert({
        request_id: requestId,
        user_id: userId,
        event_id: eventId,
        type: "dp",
        amount: 0,
        status: "failed",
      });

      throw new Error("User not found or could not fetch data.");
    }

    const { credits, is_premium_user } = userData;

    // Count DPs generated by this user for this specific event
    const { count: dpsCount, error: dpsCountError } = await supabaseClient
      .from("dps")
      .select("*", { count: "exact", head: true })
      .eq("user_id", userId)
      .eq("event_id", eventId);

    if (dpsCountError) {
      console.error("Error counting DPs:", dpsCountError);

      // Record the failed request
      await supabaseClient.from("credit_deduction_requests").insert({
        request_id: requestId,
        user_id: userId,
        event_id: eventId,
        type: "dp",
        amount: 0,
        status: "failed",
      });

      throw new Error("Failed to count DPs for event.");
    }

    const freeDPLimitPerEvent = 100;
    const dpCostPerThousand = 1; // 1 credit per 1000 DPs
    const dpCostPerUnit = dpCostPerThousand / 1000; // 0.001 credits per DP

    if (dpsCount !== null && dpsCount < freeDPLimitPerEvent) {
      // Still within free DP limit for this event, no credit deduction

      // Record the successful request with zero cost
      await supabaseClient.from("credit_deduction_requests").insert({
        request_id: requestId,
        user_id: userId,
        event_id: eventId,
        type: "dp",
        amount: 0,
        status: "completed",
      });

      return new Response(
        JSON.stringify({
          message: "Within free DP limit for this event.",
          remaining_free_dps: freeDPLimitPerEvent - dpsCount,
          credits_deducted: 0,
        }),
        {
          status: 200,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    } else {
      // Free DP limit exhausted for this event, deduct credits
      if (credits < dpCostPerUnit) {
        // Record the failed request due to insufficient credits
        await supabaseClient.from("credit_deduction_requests").insert({
          request_id: requestId,
          user_id: userId,
          event_id: eventId,
          type: "dp",
          amount: dpCostPerUnit,
          status: "failed",
        });

        return new Response(
          JSON.stringify({
            error: "Insufficient credits",
            required_credits: dpCostPerUnit,
            available_credits: credits,
          }),
          {
            status: 402, // Payment Required
            headers: { "Content-Type": "application/json", ...corsHeaders },
          }
        );
      }

      // Deduct credits within a transaction
      const { data, error: transactionError } = await supabaseClient.rpc(
        "deduct_user_credits",
        {
          user_id_param: userId,
          amount_param: dpCostPerUnit,
        }
      );

      if (transactionError) {
        console.error("Transaction error:", transactionError);

        // Record the failed request
        await supabaseClient.from("credit_deduction_requests").insert({
          request_id: requestId,
          user_id: userId,
          event_id: eventId,
          type: "dp",
          amount: dpCostPerUnit,
          status: "failed",
        });

        throw new Error("Failed to deduct credits for DP generation.");
      }

      // Record the successful request
      await supabaseClient.from("credit_deduction_requests").insert({
        request_id: requestId,
        user_id: userId,
        event_id: eventId,
        type: "dp",
        amount: dpCostPerUnit,
        status: "completed",
      });

      // Record the transaction
      await supabaseClient.from("credit_transactions").insert({
        user_id: userId,
        amount: -dpCostPerUnit,
        transaction_type: "dp_generation",
        status: "completed",
        notes: `DP generated for event ${eventId}`,
      });

      return new Response(
        JSON.stringify({
          message: "Credits deducted for DP generation successfully.",
          remaining_credits: credits - dpCostPerUnit,
          credits_deducted: dpCostPerUnit,
        }),
        {
          status: 200,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    }
  } catch (error) {
    console.error("Edge Function error:", error.message);
    return new Response(
      JSON.stringify({ error: error.message || "Internal Server Error" }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
});
